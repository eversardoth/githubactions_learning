name: RA Tag and Release
description: Tags and publishes pre and stable releases
inputs:
  prerelease:
    description: Indicator of whether or not is a prerelease
    required: false
  files:
    description: String with glob patterns of files that should be uploaded to the release
    required: false

runs:
  using: 'composite'
  steps:
    - name: Tag generation
      id: tag_generation
      uses: paulhatch/semantic-version@v5.0.3
      with:
        tag_prefix: "v"
        major_pattern: (MAJOR)
        minor_pattern: (MINOR)
        version_format: v${major}.${minor}.${patch}
    - name: Tag and Publish release
      id: tag_release
      env:
        tag_name: ${{ steps.tag_generation.outputs.version_tag }}
        target_commitish: ${{ github.sha }}
        prerelease: ${{ inputs.prerelease }}
        files: ${{ inputs.files }}
      uses: actions/github-script@v6
      with:
        retries: 3
        script: |
          async function createRelease(owner, repo, tag_name, last_prerelease, target_commitish, prerelease, max_suffix_increase=3){

              if (max_suffix_increase <= 0) {
                  core.error("Too many suffix increase retries. Aborting...");
                  throw new Error("Too many suffix increases.");
              }

              const prerelease_suffix = last_prerelease + 1;

              console.log(`${tag_name}-${prerelease_suffix}`);

              try {
                  const release = await github.rest.repos.createRelease({
                      owner: owner,
                      repo: repo,
                      tag_name: `${tag_name}-${prerelease_suffix}`,
                      target_commitish: target_commitish,
                      prerelease: 3,
                  });
                  
                  return release;
              } catch (error) {
                  const already_exists_error = error.response?.data?.errors?.find((error) => error.resource === "Release" && error.code === "already_exists" && error.field === "tag_name");
                  if(error.status === 422 && already_exists_error){
                      core.warning("The generated prerelease suffix is already used, this can be related to race conditions for prereleases generation,the suffix will be increased by one");
                      return createRelease(owner, repo, tag_name, prerelease_suffix, target_commitish, prerelease, max_suffix_increase-1);
                  }
                  core.error("There has been an issue tagging and publishing the release");
                  console.log(JSON.stringify(error))
                  throw error;
              }


          }

          try {

          

              // Check supported release types

              if (process.env.prerelease !== 'true' && process.env.prerelease !== 'false') {
                  throw new Error("This input only accepts true and false")
              } else {
                  core.info(`This action was set to publish a ${process.env.prerelease === 'true' ? 'prerelease' : 'release'}`)
              }

              const prerelease = process.env.prerelease.toUpperCase() === 'TRUE';
              core.info(prerelease);



              // Calculate pre-release suffix based on retrieved list from API

              const tag_name = process.env.tag_name;

              let last_prerelease = 0;

              if (prerelease) {

                  try {
                      for await (const response of github.paginate.iterator(
                          github.rest.repos.listTags,
                          {
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                          }
                      )) {
                          const regex = RegExp(`^${tag_name}-[0-9]+$`);
                          console.log(JSON.stringify(response))
                          const latest_tag = response.data.find((tag) => { return regex.test(tag.name) });
                          if (latest_tag) {
                              last_prerelease = Number(latest_tag.name.split('-').pop());
                              console.log(last_prerelease);
                              console.log(latest_tag.name);
                              console.log(latest_tag.name.split('-'));
                              break;
                          }
                      }

                  } catch (error) {
                      core.error("Unexpected error fetching exisitng releases and generating prerelease suffix");
                      throw error;
                  }



              }

              const release = await createRelease(context.repo.owner, context.repo.repo, tag_name, last_prerelease, process.env.target_commitish, prerelease, 3)

              // Search glob matching files and try to upload them

              const globber = await glob.create(process.env.files);

              const path = require('path');

              // await exec.exec('npm', ['install', 'mime']);

              // const mime = require('mime');

              const fs = require('fs');

              try {
                  for await (const file of globber.globGenerator()) {

                      const name = path.basename(file);
              
                      // const file_type = mime.getType(file) || "application/octet-stream";

                      const file_type = "application/octet-stream";

                      const data = fs.readFileSync(file);

                      console.log(JSON.stringify(release))
              
                      await github.rest.repos.uploadReleaseAsset({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          release_id: release.data.id,
                          name: name,
                          data: data,
                          headers: {
                              "content-type": file_type
                          }
                      });
                  }
                  
              } catch (error) {

                  core.error('There has been an issue uploading the provided glob patterned files');
                  throw error;
                  
              }

              // If its a PR comment that the pre release is trying to be builded, if everything well same comment modify, if bad que fue mal

          } catch (error) {
              core.setFailed(error);
          }
    - name: Only publish
      if: ${{ false }}
      uses: softprops/action-gh-release@v0.1.15
      with:
        tag_name: ${steps.tag_release.outputs.tag_name}
        files: ${{ inputs.files }}
        prerelease: ${{inputs.prerelease }}